// Generated by dojo-bindgen on Tue, 29 Jul 2025 12:25:12 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;
using BigInteger = System.Numerics.BigInteger;

// System definitions for `evolute_duel-account_migration` contract
public class Account_migration : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `initiate_migration` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> initiate_migration(Account account, FieldElement target_controller) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(target_controller.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "initiate_migration",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `confirm_migration` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> confirm_migration(Account account, FieldElement guest_address) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(guest_address.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "confirm_migration",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `cancel_migration` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> cancel_migration(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "cancel_migration",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `execute_migration` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> execute_migration(Account account, FieldElement guest_address) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(guest_address.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "execute_migration",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `emergency_cancel_migration` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> emergency_cancel_migration(Account account, FieldElement guest_address) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(guest_address.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "emergency_cancel_migration",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `upgrade` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> upgrade(Account account, FieldElement new_class_hash) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new_class_hash.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "upgrade",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `transfer_ownership` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> transfer_ownership(Account account, FieldElement new_owner) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new_owner.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "transfer_ownership",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `renounce_ownership` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> renounce_ownership(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "renounce_ownership",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `transferOwnership` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> transferOwnership(Account account, FieldElement newOwner) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(newOwner.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "transferOwnership",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `renounceOwnership` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> renounceOwnership(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "renounceOwnership",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        