// Generated by dojo-bindgen on Wed, 30 Jul 2025 11:43:10 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;
using BigInteger = System.Numerics.BigInteger;

// System definitions for `evolute_duel-tutorial` contract
public class Tutorial : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `create_tutorial_game` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> create_tutorial_game(Account account, FieldElement bot_address) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(bot_address.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "create_tutorial_game",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `make_move` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> make_move(Account account, Option<byte> joker_tile, byte rotation, byte col, byte row) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(Enum.GetIndex(joker_tile)).Inner);
		if (joker_tile is Option<byte>.Some) calldata.Add(new FieldElement(((Option<byte>.Some)joker_tile).value).Inner);
		calldata.Add(new FieldElement(rotation).Inner);
		calldata.Add(new FieldElement(col).Inner);
		calldata.Add(new FieldElement(row).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "make_move",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `skip_move` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> skip_move(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "skip_move",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `complete_tutorial` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> complete_tutorial(Account account, uint game_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(game_id).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "complete_tutorial",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `upgrade` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> upgrade(Account account, FieldElement new_class_hash) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new_class_hash.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "upgrade",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        