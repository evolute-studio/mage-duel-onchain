// Generated by dojo-bindgen on Tue, 18 Feb 2025 15:33:04 +0000. Do not modify this file manually.
using System;
using Dojo;
using Dojo.Starknet;
using System.Reflection;
using System.Linq;
using System.Collections.Generic;
using Enum = Dojo.Starknet.Enum;
using BigInteger = System.Numerics.BigInteger;

// Type definition for `evolute_duel::models::GameState` enum
public abstract record GameState() : Enum {
    public record InProgress() : GameState;
    public record Finished() : GameState;
}

// Type definition for `evolute_duel::models::TEdge` enum
public abstract record TEdge() : Enum {
    public record C() : TEdge;
    public record R() : TEdge;
    public record M() : TEdge;
    public record F() : TEdge;
}

// Type definition for `evolute_duel::models::Tile` enum
public abstract record Tile() : Enum {
    public record CCCC() : Tile;
    public record FFFF() : Tile;
    public record RRRR() : Tile;
    public record CCCF() : Tile;
    public record CCCR() : Tile;
    public record CFFF() : Tile;
    public record FFFR() : Tile;
    public record CRRR() : Tile;
    public record FRRR() : Tile;
    public record CCFF() : Tile;
    public record CFCF() : Tile;
    public record CCRR() : Tile;
    public record CRCR() : Tile;
    public record FFRR() : Tile;
    public record FRFR() : Tile;
    public record CCFR() : Tile;
    public record CCRF() : Tile;
    public record CFCR() : Tile;
    public record CFFR() : Tile;
    public record CFRF() : Tile;
    public record CRFF() : Tile;
    public record CRRF() : Tile;
    public record CRFR() : Tile;
    public record CFRR() : Tile;
}

// Type definition for `core::option::Option::<evolute_duel::models::Tile>` enum
public abstract record Option<A>() : Enum {
    public record Some(A value) : Option<A>;
    public record None() : Option<A>;
}


// Model definition for `evolute_duel::models::Board` model
public class evolute_duel_Board : ModelInstance {
    [ModelField("id")]
        public FieldElement id;

        [ModelField("initial_edge_state")]
        public TEdge[] initial_edge_state;

        [ModelField("available_tiles_in_deck")]
        public Tile[] available_tiles_in_deck;

        [ModelField("state")]
        public Option<Tile>[] state;

        [ModelField("player1")]
        public FieldElement player1;

        [ModelField("player2")]
        public FieldElement player2;

        [ModelField("last_move_id")]
        public Option<FieldElement> last_move_id;

        [ModelField("game_state")]
        public GameState game_state;

    // Start is called before the first frame update
    void Start() {
    }

    // Update is called once per frame
    void Update() {
    }
}

        