// Generated by dojo-bindgen on Mon, 21 Jul 2025 19:51:39 +0000. Do not modify this file manually.
using System;
using Dojo;
using Dojo.Starknet;
using System.Reflection;
using System.Linq;
using System.Collections.Generic;
using Enum = Dojo.Starknet.Enum;
using BigInteger = System.Numerics.BigInteger;

// Type definition for `core::option::Option` enum
public abstract record Option<A>() : Enum {
    public record Some(A value) : Option<A>;
    public record None() : Option<A>;
}

// Type definition for `evolute_duel::types::packing::GameState` enum
public abstract record GameState() : Enum {
    public record Creating() : GameState;
    public record Reveal() : GameState;
    public record Request() : GameState;
    public record Move() : GameState;
    public record Finished() : GameState;
}

// Type definition for `evolute_duel::types::packing::PlayerSide` enum
public abstract record PlayerSide() : Enum {
    public record None() : PlayerSide;
    public record Blue() : PlayerSide;
    public record Red() : PlayerSide;
}


// Model definition for `evolute_duel::models::game::Board` model
public class evolute_duel_Board : ModelInstance {
    [ModelField("id")]
        public FieldElement id;

        [ModelField("available_tiles_in_deck")]
        public byte[] available_tiles_in_deck;

        [ModelField("top_tile")]
        public Option<byte> top_tile;

        [ModelField("player1")]
        public (FieldElement, PlayerSide, byte) player1;

        [ModelField("player2")]
        public (FieldElement, PlayerSide, byte) player2;

        [ModelField("blue_score")]
        public (ushort, ushort) blue_score;

        [ModelField("red_score")]
        public (ushort, ushort) red_score;

        [ModelField("last_move_id")]
        public Option<FieldElement> last_move_id;

        [ModelField("game_state")]
        public GameState game_state;

        [ModelField("moves_done")]
        public byte moves_done;

        [ModelField("commited_tile")]
        public Option<byte> commited_tile;

        [ModelField("phase_started_at")]
        public ulong phase_started_at;

    // Start is called before the first frame update
    void Start() {
    }

    // Update is called once per frame
    void Update() {
    }
}

        